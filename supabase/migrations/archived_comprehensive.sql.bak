-- COMPREHENSIVE FIX: Drop all versions and create correct get_incidents_with_details function
-- Date: 2025-08-26
-- Purpose: Resolve function signature conflicts and column name mismatches

-- Step 1: Drop ALL existing versions of the function
-- We need to drop with CASCADE to handle any dependencies
DROP FUNCTION IF EXISTS public.get_incidents_with_details CASCADE;
DROP FUNCTION IF EXISTS public.get_incidents_with_details(integer, integer, integer, integer, date, date, integer, integer) CASCADE;
DROP FUNCTION IF EXISTS public.get_incidents_with_details(uuid, integer, integer) CASCADE;
DROP FUNCTION IF EXISTS public.get_incidents_count CASCADE;

-- Step 2: Create the correct function with verified column names
CREATE OR REPLACE FUNCTION public.get_incidents_with_details(
    p_user_id uuid DEFAULT NULL,
    p_limit integer DEFAULT 50,
    p_offset integer DEFAULT 0
)
RETURNS TABLE (
    incident_id bigint,
    incident_number text,
    date_of_injury date,
    time_of_injury time,
    injury_type text,
    classification text,
    incident_status text,
    fatality boolean,
    injury_description text,
    treatment_provided text,
    returned_to_work boolean,
    total_days_lost integer,
    actions text,
    case_notes text,
    witness text,
    doctor_notes text,
    shift_arrangement text,
    incident_summary text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    
    -- Worker details (verified column names)
    worker_id bigint,
    worker_name text,
    worker_occupation text,
    worker_phone text,
    worker_email text,
    worker_employment_type text,
    
    -- Employer details (verified column names)
    employer_id bigint,
    employer_name text,
    employer_abn text,
    employer_state text,
    employer_phone text,
    employer_manager_name text,
    employer_manager_email text,
    
    -- Site details (verified column names)
    site_id bigint,
    site_name text,
    site_address text,
    site_city text,
    site_state text,
    site_supervisor text,
    
    -- Department details (verified column names)
    department_id bigint,
    department_name text,
    
    -- Injury code details
    noi_description text,
    moi_description text,
    aoi_description text,
    bl_description text,
    
    -- Document count
    document_count bigint
)
LANGUAGE plpgsql
SECURITY DEFINER
STABLE
AS $$
DECLARE
    v_user_role_id integer;
    v_user_employer_id bigint;
    v_selected_employer_id bigint;
BEGIN
    -- Get user details if user_id is provided
    IF p_user_id IS NOT NULL THEN
        SELECT role_id, employer_id 
        INTO v_user_role_id, v_user_employer_id
        FROM users 
        WHERE user_id = p_user_id;
        
        -- Check for selected employer context
        SELECT selected_employer_id 
        INTO v_selected_employer_id
        FROM user_session_contexts 
        WHERE user_id = p_user_id;
    END IF;
    
    RETURN QUERY
    SELECT 
        -- Incident details
        i.incident_id,
        i.incident_number::text,
        i.date_of_injury,
        i.time_of_injury,
        i.injury_type::text,
        i.classification::text,
        COALESCE(i.incident_status, 'Open')::text,
        COALESCE(i.fatality, false),
        i.injury_description::text,
        i.treatment_provided::text,
        COALESCE(i.returned_to_work, false),
        COALESCE(i.total_days_lost, 0),
        i.actions::text,
        i.case_notes::text,
        i.witness::text,
        i.doctor_notes::text,
        i.shift_arrangement::text,
        i.incident_summary::text,
        i.created_at,
        i.updated_at,
        
        -- Worker details with correct column names
        w.worker_id,
        CONCAT(w.given_name, ' ', w.family_name)::text AS worker_name,
        w.occupation::text AS worker_occupation,
        COALESCE(w.mobile_number, w.phone_number)::text AS worker_phone,
        w.email::text AS worker_email,
        w.employment_type::text AS worker_employment_type,
        
        -- Employer details with correct column names (abn not employer_abn)
        e.employer_id,
        e.employer_name::text,
        e.abn::text AS employer_abn,
        e.employer_state::text,
        e.employer_phone::text,
        e.manager_name::text AS employer_manager_name,
        e.manager_email::text AS employer_manager_email,
        
        -- Site details with correct column names (no site_location field)
        s.site_id,
        s.site_name::text,
        s.street_address::text AS site_address,
        s.city::text AS site_city,
        s.state::text AS site_state,
        s.supervisor_name::text AS site_supervisor,
        
        -- Department details
        d.department_id,
        d.department_name::text,
        
        -- Injury code descriptions (check if these tables exist)
        noi.noi_description::text,
        moi.moi_description::text,
        aoi.aoi_description::text,
        bl.bl_description::text,
        
        -- Document count
        COALESCE(doc_count.count, 0) AS document_count
        
    FROM incidents i
    LEFT JOIN workers w ON i.worker_id = w.worker_id
    LEFT JOIN employers e ON i.employer_id = e.employer_id
    LEFT JOIN sites s ON i.site_id = s.site_id
    LEFT JOIN departments d ON i.department_id = d.department_id
    LEFT JOIN nature_of_injury_codes noi ON i.noi_code_id = noi.noi_code_id
    LEFT JOIN mechanism_of_injury_codes moi ON i.moi_code_id = moi.moi_code_id
    LEFT JOIN agency_of_injury_codes aoi ON i.aoi_code_id = aoi.aoi_code_id
    LEFT JOIN bodily_location_codes bl ON i.bl_code_id = bl.bl_code_id
    LEFT JOIN LATERAL (
        SELECT COUNT(*) AS count
        FROM incident_documents id
        WHERE id.incident_id = i.incident_id
    ) doc_count ON true
    
    WHERE 
        -- Apply filtering based on user role and context
        CASE 
            -- No user context, return all
            WHEN p_user_id IS NULL THEN true
            
            -- Super Admin (role 1) with "View All" context (-1)
            WHEN v_user_role_id = 1 AND v_selected_employer_id = -1 THEN true
            
            -- Super Admin with specific employer selected
            WHEN v_user_role_id = 1 AND v_selected_employer_id IS NOT NULL AND v_selected_employer_id != -1 
                THEN i.employer_id = v_selected_employer_id
            
            -- Super Admin with no selection (default to all)
            WHEN v_user_role_id = 1 AND v_selected_employer_id IS NULL THEN true
            
            -- Account Manager (role 2) sees all incidents
            WHEN v_user_role_id = 2 THEN true
            
            -- Data Analyst (role 4) sees all incidents
            WHEN v_user_role_id = 4 THEN true
            
            -- Government Official (role 7) sees all incidents
            WHEN v_user_role_id = 7 THEN true
            
            -- Builder Admin (role 5) sees their employer's incidents
            WHEN v_user_role_id = 5 AND v_user_employer_id IS NOT NULL 
                THEN i.employer_id = v_user_employer_id
            
            -- Medical Professional (role 6) sees all incidents (for now)
            WHEN v_user_role_id = 6 THEN true
            
            -- Insurance Provider (role 8) sees all incidents (for now)
            WHEN v_user_role_id = 8 THEN true
            
            -- Vendor (role 9) sees their employer's incidents
            WHEN v_user_role_id = 9 AND v_user_employer_id IS NOT NULL 
                THEN i.employer_id = v_user_employer_id
            
            -- Data Entry (role 3) sees their employer's incidents
            WHEN v_user_role_id = 3 AND v_user_employer_id IS NOT NULL 
                THEN i.employer_id = v_user_employer_id
            
            -- Default: no access
            ELSE false
        END
    
    ORDER BY i.date_of_injury DESC NULLS LAST, i.time_of_injury DESC NULLS LAST, i.created_at DESC
    LIMIT p_limit
    OFFSET p_offset;
END;
$$;

-- Step 3: Create a simplified count function
CREATE OR REPLACE FUNCTION public.get_incidents_count(
    p_user_id uuid DEFAULT NULL
)
RETURNS integer
LANGUAGE plpgsql
SECURITY DEFINER
STABLE
AS $$
DECLARE
    v_user_role_id integer;
    v_user_employer_id bigint;
    v_selected_employer_id bigint;
    v_count integer;
BEGIN
    -- Get user details if user_id is provided
    IF p_user_id IS NOT NULL THEN
        SELECT role_id, employer_id 
        INTO v_user_role_id, v_user_employer_id
        FROM users 
        WHERE user_id = p_user_id;
        
        -- Check for selected employer context
        SELECT selected_employer_id 
        INTO v_selected_employer_id
        FROM user_session_contexts 
        WHERE user_id = p_user_id;
    END IF;
    
    SELECT COUNT(*)::integer INTO v_count
    FROM incidents i
    WHERE 
        -- Apply same filtering logic as main function
        CASE 
            WHEN p_user_id IS NULL THEN true
            WHEN v_user_role_id = 1 AND v_selected_employer_id = -1 THEN true
            WHEN v_user_role_id = 1 AND v_selected_employer_id IS NOT NULL AND v_selected_employer_id != -1 
                THEN i.employer_id = v_selected_employer_id
            WHEN v_user_role_id = 1 AND v_selected_employer_id IS NULL THEN true
            WHEN v_user_role_id IN (2, 4, 6, 7, 8) THEN true
            WHEN v_user_role_id IN (3, 5, 9) AND v_user_employer_id IS NOT NULL 
                THEN i.employer_id = v_user_employer_id
            ELSE false
        END;
    
    RETURN v_count;
END;
$$;

-- Step 4: Grant execute permissions
GRANT EXECUTE ON FUNCTION public.get_incidents_with_details(uuid, integer, integer) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_incidents_with_details(uuid, integer, integer) TO anon;
GRANT EXECUTE ON FUNCTION public.get_incidents_count(uuid) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_incidents_count(uuid) TO anon;

-- Step 5: Add documentation
COMMENT ON FUNCTION public.get_incidents_with_details IS 'Retrieves paginated incident details with all related information. Uses correct column names and handles RLS through user context.';
COMMENT ON FUNCTION public.get_incidents_count IS 'Returns total count of incidents accessible to the user for pagination.';

-- Step 6: Verify the function works
DO $$
DECLARE
    v_count integer;
    v_test_user_id uuid;
BEGIN
    -- Test without user context (should work)
    PERFORM * FROM get_incidents_with_details(NULL, 5, 0) LIMIT 1;
    RAISE NOTICE 'Function test 1 passed: No user context';
    
    -- Test count function
    SELECT get_incidents_count(NULL) INTO v_count;
    RAISE NOTICE 'Count function test passed. Total incidents: %', v_count;
    
    -- Test with a real user if one exists
    SELECT user_id INTO v_test_user_id FROM users WHERE role_id = 1 LIMIT 1;
    IF v_test_user_id IS NOT NULL THEN
        PERFORM * FROM get_incidents_with_details(v_test_user_id, 5, 0) LIMIT 1;
        RAISE NOTICE 'Function test 2 passed: With Super Admin user context';
    END IF;
    
    RAISE NOTICE 'All function tests completed successfully!';
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Function test failed: %', SQLERRM;
END;
$$;